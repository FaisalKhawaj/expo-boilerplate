import * as React from "react";
import Svg, { Path, SvgProps } from "react-native-svg";

export const BackChevronIcon = (
  props: React.JSX.IntrinsicAttributes &
    React.JSX.IntrinsicClassAttributes<Svg> &
    Pick<
      Readonly<SvgProps>,
      | "width"
      | "height"
      | "viewBox"
      | "color"
      | "title"
      | "children"
      | "opacity"
      | "fill"
      | "fillOpacity"
      | "fillRule"
      | "stroke"
      | "strokeWidth"
      | "strokeOpacity"
      | "strokeDasharray"
      | "strokeDashoffset"
      | "strokeLinecap"
      | "strokeLinejoin"
      | "strokeMiterlimit"
      | "vectorEffect"
      | "clipRule"
      | "clipPath"
      | "translate"
      | "translateX"
      | "translateY"
      | "origin"
      | "originX"
      | "originY"
      | "scale"
      | "scaleX"
      | "scaleY"
      | "skew"
      | "skewX"
      | "skewY"
      | "rotation"
      | "x"
      | "y"
      | "transform"
      | "pointerEvents"
      | "onStartShouldSetResponder"
      | "onMoveShouldSetResponder"
      | "onResponderEnd"
      | "onResponderGrant"
      | "onResponderReject"
      | "onResponderMove"
      | "onResponderRelease"
      | "onResponderStart"
      | "onResponderTerminationRequest"
      | "onResponderTerminate"
      | "onStartShouldSetResponderCapture"
      | "onMoveShouldSetResponderCapture"
      | "disabled"
      | "onPress"
      | "onPressIn"
      | "onPressOut"
      | "onLongPress"
      | "delayPressIn"
      | "delayPressOut"
      | "delayLongPress"
      | "id"
      | "marker"
      | "markerStart"
      | "markerMid"
      | "markerEnd"
      | "mask"
      | "onLayout"
      | "accessibilityLabel"
      | "accessible"
      | "testID"
      | "font"
      | "fontStyle"
      | "fontVariant"
      | "fontWeight"
      | "fontStretch"
      | "fontSize"
      | "fontFamily"
      | "textAnchor"
      | "textDecoration"
      | "letterSpacing"
      | "wordSpacing"
      | "kerning"
      | "fontFeatureSettings"
      | "fontVariantLigatures"
      | "fontVariationSettings"
      | "hitSlop"
      | "needsOffscreenAlphaCompositing"
      | "removeClippedSubviews"
      | "style"
      | "nativeID"
      | "collapsable"
      | "renderToHardwareTextureAndroid"
      | "focusable"
      | "tabIndex"
      | "shouldRasterizeIOS"
      | "isTVSelectable"
      | "hasTVPreferredFocus"
      | "tvParallaxProperties"
      | "tvParallaxShiftDistanceX"
      | "tvParallaxShiftDistanceY"
      | "tvParallaxTiltAngle"
      | "tvParallaxMagnification"
      | "onTouchStart"
      | "onTouchMove"
      | "onTouchEnd"
      | "onTouchCancel"
      | "onTouchEndCapture"
      | "onPointerEnter"
      | "onPointerEnterCapture"
      | "onPointerLeave"
      | "onPointerLeaveCapture"
      | "onPointerMove"
      | "onPointerMoveCapture"
      | "onPointerCancel"
      | "onPointerCancelCapture"
      | "onPointerDown"
      | "onPointerDownCapture"
      | "onPointerUp"
      | "onPointerUpCapture"
      | "accessibilityActions"
      | "aria-label"
      | "accessibilityRole"
      | "accessibilityState"
      | "aria-busy"
      | "aria-checked"
      | "aria-disabled"
      | "aria-expanded"
      | "aria-selected"
      | "accessibilityHint"
      | "accessibilityValue"
      | "aria-valuemax"
      | "aria-valuemin"
      | "aria-valuenow"
      | "aria-valuetext"
      | "onAccessibilityAction"
      | "importantForAccessibility"
      | "aria-hidden"
      | "aria-modal"
      | "role"
      | "accessibilityLabelledBy"
      | "aria-labelledby"
      | "accessibilityLiveRegion"
      | "aria-live"
      | "accessibilityElementsHidden"
      | "accessibilityViewIsModal"
      | "onAccessibilityEscape"
      | "onAccessibilityTap"
      | "onMagicTap"
      | "accessibilityIgnoresInvertColors"
      | "accessibilityLanguage"
    > & { readonly preserveAspectRatio?: string | undefined } & {}
) => {
  const { width, height } = props;
  return (
    <Svg
      //   xmlns="http://www.w3.org/2000/svg"
      width={width || 800}
      height={height || 800}
      //   className="icon"
      viewBox="0 0 1024 1024"
      {...props}
    >
      <Path d="M669.6 849.6c8.8 8 22.4 7.2 30.4-1.6s7.2-22.4-1.6-30.4l-309.6-280c-8-7.2-8-17.6 0-24.8l309.6-270.4c8.8-8 9.6-21.6 2.4-30.4-8-8.8-21.6-9.6-30.4-2.4L360.8 480.8c-27.2 24-28 64-.8 88.8l309.6 280z" />
    </Svg>
  );
};
